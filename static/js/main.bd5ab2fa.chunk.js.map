{"version":3,"sources":["components/Loader/Loader.js","App.js","reportWebVitals.js","index.js"],"names":["Loader","class","countDownDate","Date","getTime","App","useState","customInterval","setCustomInterval","seconds","minutes","hours","days","time","setTime","theEnd","setTheEnd","useEffect","startCounter","clearInterval","interval","setInterval","timer","timeRemaining","Math","floor","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAQeA,MARf,WACE,OACE,mCACE,qBAAKC,MAAM,SAAX,8BCCAC,EAAgB,IAAIC,KAAK,cAAcC,UA2E9BC,MAzEf,WACE,MAA4CC,mBAAS,MAArD,mBAAOC,EAAP,KAAuBC,EAAvB,KACA,EAAwBF,mBAAS,CAC/BG,QAAS,KACTC,QAAS,KACTC,MAAO,KACPC,KAAM,OAJR,mBAAOC,EAAP,KAAaC,EAAb,KAMA,EAA4BR,oBAAS,GAArC,mBAAOS,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WAER,OADAC,IACO,WACLC,cAAcZ,MAEf,IAEH,IAAMW,EAAe,WACnB,IAAME,EAAWC,YAAYC,EAAO,KACpCd,EAAkBY,IAGdE,EAAQ,WACZ,IAAMC,EAAgBrB,GAAgB,IAAIC,MAAOC,UACjD,GAAImB,EAAgB,EAAG,CACrB,IAAMX,EAAOY,KAAKC,MAAMF,EAAa,OAC/BZ,EAAQa,KAAKC,MAChBF,EAAa,MAAd,MAEIb,EAAUc,KAAKC,MAClBF,EAAa,KAAd,KAEId,EAAUe,KAAKC,MAAOF,EAAa,IAAkB,KAC3DT,EAAQ,CAAEF,OAAMD,QAAOD,UAASD,iBAEhCU,cAAcZ,GACdS,GAAU,IAId,OACE,qBAAKU,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKA,UAAU,SACf,qBAAKA,UAAU,SACf,qBAAKA,UAAU,SACf,qBAAKA,UAAU,SAEf,qBAAKA,UAAW,UAAhB,SACGX,EACC,qDAEA,qCACE,8BACE,uEAEF,8BACmB,MAAhBF,EAAKJ,QACJ,+BACGI,EAAKD,KADR,KACgBC,EAAKF,MADrB,KAC8BE,EAAKH,QADnC,KAC8CG,EAAKJ,QADnD,OAIA,cAAC,EAAD,iBCxDHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.bd5ab2fa.chunk.js","sourcesContent":["function Loader() {\n  return (\n    <>\n      <div class=\"loader\">Carregando...</div>\n    </>\n  );\n}\n\nexport default Loader;\n","import \"./App.css\";\nimport { useEffect, useState } from \"react\";\nimport Loader from \"./components/Loader/Loader\";\n\nconst countDownDate = new Date(\"06/11/2021\").getTime();\n\nfunction App() {\n  const [customInterval, setCustomInterval] = useState(null);\n  const [time, setTime] = useState({\n    seconds: null,\n    minutes: null,\n    hours: null,\n    days: null,\n  });\n  const [theEnd, setTheEnd] = useState(false);\n\n  useEffect(() => {\n    startCounter();\n    return () => {\n      clearInterval(customInterval);\n    };\n  }, []);\n\n  const startCounter = () => {\n    const interval = setInterval(timer, 1000);\n    setCustomInterval(interval);\n  };\n\n  const timer = () => {\n    const timeRemaining = countDownDate - new Date().getTime();\n    if (timeRemaining > 0) {\n      const days = Math.floor(timeRemaining / (1000 * 60 * 60 * 24));\n      const hours = Math.floor(\n        (timeRemaining % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n      const minutes = Math.floor(\n        (timeRemaining % (1000 * 60 * 60)) / (1000 * 60)\n      );\n      const seconds = Math.floor((timeRemaining % (1000 * 60)) / 1000);\n      setTime({ days, hours, minutes, seconds });\n    } else {\n      clearInterval(customInterval);\n      setTheEnd(true);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"bg-1\" />\n        <div className=\"bg-2\" />\n        <div className=\"bg-3\" />\n        <div className=\"bg-4\" />\n\n        <div className={\"content\"}>\n          {theEnd ? (\n            <h1>PARTIU PRAIA CARAE!</h1>\n          ) : (\n            <>\n              <div>\n                <h1>Contagem para o fim da depress√£o</h1>\n              </div>\n              <div>\n                {time.seconds != null ? (\n                  <h2>\n                    {time.days}d {time.hours}h {time.minutes}m {time.seconds}s\n                  </h2>\n                ) : (\n                  <Loader />\n                )}\n              </div>\n            </>\n          )}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}